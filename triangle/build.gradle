plugins {
    id 'kotlin-multiplatform'
}
kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation project(":utils")
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.20"
            }
        }
    }
    if (os.isWindows() || System.getProperty("idea.active") != "true") {
        targets {
            fromPreset(presets.mingwX64, "mingw") {
                compilations.main {
                    outputKinds('EXECUTABLE')
                }
            }
        }
        sourceSets {
            mingwMain {
                dependencies { }
            }
        }
    }
    if (os.isLinux() || System.getProperty("idea.active") != "true") {
        targets {
            fromPreset(presets.linuxX64, "linux") {
                compilations.main {
                    outputKinds('EXECUTABLE')
                }
            }
        }
        sourceSets {
            linuxMain {
                dependencies {}
            }
        }
    }
    if (os.isMacOsX() || System.getProperty("idea.active") != "true") {
        targets {
            fromPreset(presets.macosX64, "macos") {
                compilations.main {
                    outputKinds('EXECUTABLE')
                }
            }
        }
        sourceSets {
            macosMain {
                dependencies {
                }
            }
        }
    }
}

task compileShaders {
    fileTree("src/commonMain/resources/shaders").matching {
        include "**/*.vert"
        include "**/*.frag"
    }
    .each { aFile ->
        exec {
            commandLine 'glslc', aFile.absolutePath, '-o', aFile.absolutePath + '.spv'
        }
    }
}

kotlin.targets.all { target ->
    if (target.platformType.name == "native") {
        task("runProgram${target.name.capitalize()}") {
            def buildType = 'release' // Change to 'debug' to run application with debug symbols.
            dependsOn "linkMain${buildType.capitalize()}Executable${target.name.capitalize()}"
            dependsOn compileShaders
            doLast {
                def programFile = kotlin.targets[target.name].compilations.main.getBinary('EXECUTABLE', buildType)
                exec {
                    executable programFile
                    args ['']
                    workingDir = 'src/commonMain/resources'
                }
            }
        }
    }
}

task("runProgramJvm", type: JavaExec) {
    dependsOn compileShaders
    
    main = 'MainKt'
    workingDir = 'src/commonMain/resources'
    
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main

    classpath = files(
            compilation.runtimeDependencyFiles,
            compilation.output.allOutputs
    )
}
